// Create Employee collection
db.createCollection("Employee")

// Insert 5 documents
db.Employee.insertMany([
    {
        Emp_id: 1,
        Name: { FName: "John", LName: "Doe" },
        Company_name: "TCS",
        Salary: 50000,
        Designation: "Developer",
        Age: 30,
        Expertise: ["Java", "MongoDB"],
        DOB: "1990-01-01",
        Email_id: "john.doe@example.com",
        Contact: "1234567890",
        Address: [{ PAddr: "Street1", LAddr: "Street2" }]
    },
    // Add more documents as needed
]);

// Task 1: Create a new document if no document in the employee collection contains {Designation: "Tester", Company_name: "TCS", Age: 25}
db.Employee.updateOne(
    { Designation: "Tester", Company_name: "TCS", Age: 25 },
    {
        $setOnInsert: {
            Emp_id: 2,
            Name: { FName: "Tester", LName: "TCS" },
            Salary: 40000,
            Expertise: ["Testing"],
            DOB: "1998-01-01",
            Email_id: "tester.tcs@example.com",
            Contact: "9876543210",
            Address: [{ PAddr: "Pune", LAddr: "411001" }]
        }
    },
    { upsert: true }
);

// Task 2: Find all employees working with Company_name: "TCS" and increase their salary by 2000.
db.Employee.updateMany(
    { Company_name: "TCS" },
    { $inc: { Salary: 2000 } }
);

// Task 3: Matches all documents where the value of the field Address is an embedded document that contains only the field city with the value "Pune" and the field Pin_code with the value "411001".
db.Employee.find({
    "Address": {
        $elemMatch: { PAddr: "Pune", LAddr: "411001" }
    }
});

// Task 4: Find employee details who are working as "Developer" or "Tester".
db.Employee.find({
    Designation: { $in: ["Developer", "Tester"] }
});

// Task 5: Drop Single documents where designation="Developer".
db.Employee.deleteOne({ Designation: "Developer" });

// Task 6: Count number of documents in employee collection.
db.Employee.countDocuments();
